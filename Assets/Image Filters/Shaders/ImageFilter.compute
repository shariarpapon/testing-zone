#pragma kernel ImageFilter

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
struct DataBuffer 
{
	int x, y;
	float r, g, b, a;

	void setColor(float3 col) 
	{
		r = col.x;
		g = col.y;
		b = col.z;
	}
};

RWStructuredBuffer<DataBuffer> dataBuffer;

int size_x;
int size_y;
int k;

int index1D(int x, int y) 
{
	return y * size_x + x;
}

DataBuffer getBuffer(int x, int y) 
{
	return dataBuffer[index1D(x, y)];
}


[numthreads(16,16,1)]
void ImageFilter (uint3 id : SV_DispatchThreadID)
{
	int o = index1D(id.x, id.y);
	DataBuffer temp = dataBuffer[o];

	float3 avgColor = float3(temp.r, temp.g, temp.b);
	int c = 0;

		for (int x = -k; x < k; x++) 
			for (int y = -k; y < k; y++)
			{
				if (x == id.x && y == id.y) continue;
				int sx = x + id.x;
				int sy = y + id.y;
				if (sx >= 0 && sx < size_x && sy >= 0 && sy < size_y)
				{
					DataBuffer sampleData = getBuffer(sx, sy);
					float3 sampleColor = float3(sampleData.r, sampleData.g, sampleData.b);
					avgColor += sampleColor;
					c++;
				}
			}

		avgColor /= c;
		temp.setColor(avgColor);
		
	dataBuffer[o] = temp;
}
